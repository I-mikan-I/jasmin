require import AllCore IntDiv CoreMap List Distr.
from Jasmin require import JModel_x86.
import SLH64.





module M = {
  proc crypto_scalarmult_curve25519_amd64_64_fe25519_mul (rp:W64.t, xp:W64.t, ypp:W64.t) : unit = {
    
    var yp:W64.t;
    var mulr4:W64.t;
    var mulr5:W64.t;
    var mulr6:W64.t;
    var mulr7:W64.t;
    var mulx0:W64.t;
    var mulrax:W64.t;
    var mulrdx:W64.t;
    var r0:W64.t;
    var r1:W64.t;
    var cf:bool;
    var r2:W64.t;
    var r3:W64.t;
    var mulx1:W64.t;
    var mulc:W64.t;
    var mulx2:W64.t;
    var mulx3:W64.t;
    var mulr8:W64.t;
    var mulzero:W64.t;
    var  _0:bool;
    var  _1:bool;
    var  _2:bool;
    var  _3:bool;
    var  _4:bool;
    var  _5:bool;
    var  _6:bool;
    var  _7:bool;
    var  _8:bool;
    var  _9:bool;
    var  _10:bool;
    var  _11:bool;
    var  _12:bool;
    var  _13:bool;
    var  _14:bool;
    var  _15:bool;
    var  _16:bool;
    var  _17:bool;
    var  _18:bool;
    var  _19:bool;
    var  _20:bool;
    var  _21:bool;
    var  _22:bool;
    var  _23:bool;
    var  _24:bool;
    var  _25:bool;
    var  _26:bool;
    var  _27:bool;
    var  _28:bool;
    
    yp <- ypp;
    mulr4 <- (W64.of_int 0);
    mulr5 <- (W64.of_int 0);
    mulr6 <- (W64.of_int 0);
    mulr7 <- (W64.of_int 0);
    mulx0 <- (loadW64 Glob.mem (W64.to_uint (xp + (W64.of_int (0 * 8)))));
    mulrax <- (loadW64 Glob.mem (W64.to_uint (yp + (W64.of_int (0 * 8)))));
    (mulrdx, mulrax) <- mulu_64 mulrax mulx0;
    r0 <- mulrax;
    r1 <- mulrdx;
    mulrax <- (loadW64 Glob.mem (W64.to_uint (yp + (W64.of_int (1 * 8)))));
    (mulrdx, mulrax) <- mulu_64 mulrax mulx0;
    (cf, r1) <- adc_64 r1 mulrax false;
    r2 <- (W64.of_int 0);
    ( _0, r2) <- adc_64 r2 mulrdx cf;
    mulrax <- (loadW64 Glob.mem (W64.to_uint (yp + (W64.of_int (2 * 8)))));
    (mulrdx, mulrax) <- mulu_64 mulrax mulx0;
    (cf, r2) <- adc_64 r2 mulrax false;
    r3 <- (W64.of_int 0);
    ( _1, r3) <- adc_64 r3 mulrdx cf;
    mulrax <- (loadW64 Glob.mem (W64.to_uint (yp + (W64.of_int (3 * 8)))));
    (mulrdx, mulrax) <- mulu_64 mulrax mulx0;
    (cf, r3) <- adc_64 r3 mulrax false;
    ( _2, mulr4) <- adc_64 mulr4 mulrdx cf;
    mulx1 <- (loadW64 Glob.mem (W64.to_uint (xp + (W64.of_int (1 * 8)))));
    mulrax <- (loadW64 Glob.mem (W64.to_uint (yp + (W64.of_int (0 * 8)))));
    (mulrdx, mulrax) <- mulu_64 mulrax mulx1;
    (cf, r1) <- adc_64 r1 mulrax false;
    mulc <- (W64.of_int 0);
    ( _3, mulc) <- adc_64 mulc mulrdx cf;
    mulrax <- (loadW64 Glob.mem (W64.to_uint (yp + (W64.of_int (1 * 8)))));
    (mulrdx, mulrax) <- mulu_64 mulrax mulx1;
    (cf, r2) <- adc_64 r2 mulrax false;
    ( _4, mulrdx) <- adc_64 mulrdx (W64.of_int 0) cf;
    (cf, r2) <- adc_64 r2 mulc false;
    mulc <- (W64.of_int 0);
    ( _5, mulc) <- adc_64 mulc mulrdx cf;
    mulrax <- (loadW64 Glob.mem (W64.to_uint (yp + (W64.of_int (2 * 8)))));
    (mulrdx, mulrax) <- mulu_64 mulrax mulx1;
    (cf, r3) <- adc_64 r3 mulrax false;
    ( _6, mulrdx) <- adc_64 mulrdx (W64.of_int 0) cf;
    (cf, r3) <- adc_64 r3 mulc false;
    mulc <- (W64.of_int 0);
    ( _7, mulc) <- adc_64 mulc mulrdx cf;
    mulrax <- (loadW64 Glob.mem (W64.to_uint (yp + (W64.of_int (3 * 8)))));
    (mulrdx, mulrax) <- mulu_64 mulrax mulx1;
    (cf, mulr4) <- adc_64 mulr4 mulrax false;
    ( _8, mulrdx) <- adc_64 mulrdx (W64.of_int 0) cf;
    (cf, mulr4) <- adc_64 mulr4 mulc false;
    ( _9, mulr5) <- adc_64 mulr5 mulrdx cf;
    mulx2 <- (loadW64 Glob.mem (W64.to_uint (xp + (W64.of_int (2 * 8)))));
    mulrax <- (loadW64 Glob.mem (W64.to_uint (yp + (W64.of_int (0 * 8)))));
    (mulrdx, mulrax) <- mulu_64 mulrax mulx2;
    (cf, r2) <- adc_64 r2 mulrax false;
    mulc <- (W64.of_int 0);
    ( _10, mulc) <- adc_64 mulc mulrdx cf;
    mulrax <- (loadW64 Glob.mem (W64.to_uint (yp + (W64.of_int (1 * 8)))));
    (mulrdx, mulrax) <- mulu_64 mulrax mulx2;
    (cf, r3) <- adc_64 r3 mulrax false;
    ( _11, mulrdx) <- adc_64 mulrdx (W64.of_int 0) cf;
    (cf, r3) <- adc_64 r3 mulc false;
    mulc <- (W64.of_int 0);
    ( _12, mulc) <- adc_64 mulc mulrdx cf;
    mulrax <- (loadW64 Glob.mem (W64.to_uint (yp + (W64.of_int (2 * 8)))));
    (mulrdx, mulrax) <- mulu_64 mulrax mulx2;
    (cf, mulr4) <- adc_64 mulr4 mulrax false;
    ( _13, mulrdx) <- adc_64 mulrdx (W64.of_int 0) cf;
    (cf, mulr4) <- adc_64 mulr4 mulc false;
    mulc <- (W64.of_int 0);
    ( _14, mulc) <- adc_64 mulc mulrdx cf;
    mulrax <- (loadW64 Glob.mem (W64.to_uint (yp + (W64.of_int (3 * 8)))));
    (mulrdx, mulrax) <- mulu_64 mulrax mulx2;
    (cf, mulr5) <- adc_64 mulr5 mulrax false;
    ( _15, mulrdx) <- adc_64 mulrdx (W64.of_int 0) cf;
    (cf, mulr5) <- adc_64 mulr5 mulc false;
    ( _16, mulr6) <- adc_64 mulr6 mulrdx cf;
    mulx3 <- (loadW64 Glob.mem (W64.to_uint (xp + (W64.of_int (3 * 8)))));
    mulrax <- (loadW64 Glob.mem (W64.to_uint (yp + (W64.of_int (0 * 8)))));
    (mulrdx, mulrax) <- mulu_64 mulrax mulx3;
    (cf, r3) <- adc_64 r3 mulrax false;
    mulc <- (W64.of_int 0);
    ( _17, mulc) <- adc_64 mulc mulrdx cf;
    mulrax <- (loadW64 Glob.mem (W64.to_uint (yp + (W64.of_int (1 * 8)))));
    (mulrdx, mulrax) <- mulu_64 mulrax mulx3;
    (cf, mulr4) <- adc_64 mulr4 mulrax false;
    ( _18, mulrdx) <- adc_64 mulrdx (W64.of_int 0) cf;
    (cf, mulr4) <- adc_64 mulr4 mulc false;
    mulc <- (W64.of_int 0);
    ( _19, mulc) <- adc_64 mulc mulrdx cf;
    mulrax <- (loadW64 Glob.mem (W64.to_uint (yp + (W64.of_int (2 * 8)))));
    (mulrdx, mulrax) <- mulu_64 mulrax mulx3;
    (cf, mulr5) <- adc_64 mulr5 mulrax false;
    ( _20, mulrdx) <- adc_64 mulrdx (W64.of_int 0) cf;
    (cf, mulr5) <- adc_64 mulr5 mulc false;
    mulc <- (W64.of_int 0);
    ( _21, mulc) <- adc_64 mulc mulrdx cf;
    mulrax <- (loadW64 Glob.mem (W64.to_uint (yp + (W64.of_int (3 * 8)))));
    (mulrdx, mulrax) <- mulu_64 mulrax mulx3;
    (cf, mulr6) <- adc_64 mulr6 mulrax false;
    ( _22, mulrdx) <- adc_64 mulrdx (W64.of_int 0) cf;
    (cf, mulr6) <- adc_64 mulr6 mulc false;
    ( _23, mulr7) <- adc_64 mulr7 mulrdx cf;
    mulrax <- mulr4;
    (mulrdx, mulrax) <- mulu_64 mulrax (W64.of_int 38);
    mulr4 <- mulrax;
    mulrax <- mulr5;
    mulr5 <- mulrdx;
    (mulrdx, mulrax) <- mulu_64 mulrax (W64.of_int 38);
    (cf, mulr5) <- adc_64 mulr5 mulrax false;
    mulrax <- mulr6;
    mulr6 <- (W64.of_int 0);
    ( _24, mulr6) <- adc_64 mulr6 mulrdx cf;
    (mulrdx, mulrax) <- mulu_64 mulrax (W64.of_int 38);
    (cf, mulr6) <- adc_64 mulr6 mulrax false;
    mulrax <- mulr7;
    mulr7 <- (W64.of_int 0);
    ( _25, mulr7) <- adc_64 mulr7 mulrdx cf;
    (mulrdx, mulrax) <- mulu_64 mulrax (W64.of_int 38);
    (cf, mulr7) <- adc_64 mulr7 mulrax false;
    mulr8 <- (W64.of_int 0);
    ( _26, mulr8) <- adc_64 mulr8 mulrdx cf;
    (cf, r0) <- adc_64 r0 mulr4 false;
    (cf, r1) <- adc_64 r1 mulr5 cf;
    (cf, r2) <- adc_64 r2 mulr6 cf;
    (cf, r3) <- adc_64 r3 mulr7 cf;
    mulzero <- (W64.of_int 0);
    ( _27, mulr8) <- adc_64 mulr8 mulzero cf;
    mulr8 <- (mulr8 * (W64.of_int 38));
    (cf, r0) <- adc_64 r0 mulr8 false;
    (cf, r1) <- adc_64 r1 mulzero cf;
    (cf, r2) <- adc_64 r2 mulzero cf;
    (cf, r3) <- adc_64 r3 mulzero cf;
    ( _28, mulzero) <- adc_64 mulzero mulzero cf;
    mulzero <- (mulzero * (W64.of_int 38));
    r0 <- (r0 + mulzero);
    Glob.mem <- storeW64 Glob.mem (W64.to_uint (rp + (W64.of_int (1 * 8)))) (r1);
    Glob.mem <- storeW64 Glob.mem (W64.to_uint (rp + (W64.of_int (2 * 8)))) (r2);
    Glob.mem <- storeW64 Glob.mem (W64.to_uint (rp + (W64.of_int (3 * 8)))) (r3);
    Glob.mem <- storeW64 Glob.mem (W64.to_uint (rp + (W64.of_int (0 * 8)))) (r0);
    return ();
  }
}.

