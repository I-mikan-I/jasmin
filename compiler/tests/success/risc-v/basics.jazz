export
fn void() {  }

export
fn pass(reg u32 r) -> reg u32 { return r; }

export
fn copy(reg u32 r) -> reg u32, reg u32 {
    reg u32 c;    
    c = #MV(r);
    return r, c; 
}

export
fn copy_lowering(reg u32 r) -> reg u32, reg u32 { 
    reg u32 c;
    c = r;
    return r, c;
}

export
fn add_lowering(reg u32 a, reg u32 b) -> reg u32 {
    reg u32 c;
    c = a + b;
    return c;
}

export
fn sub_imm_lowering(reg u32 a) -> reg u32 {
    reg u32 c;
    c = a - 15;
    return c;
}

export
fn if_reg_reg_lowering() -> reg u32 {
    reg u32 a;
    a = 15;
    reg u32 b;
    b = 15;
    reg u32 c;
    c = 0;

    if (a == b) { c |= 1; }
    if (!(a == b)) { c |= 2; }
    if (a != b) { c |= 4; }
    if (a > b) { c |= 16; }
    if (a < b) { c |= 32; }
    if (a >= b) { c |= 64; }
    if (a <= b) { c |= 128; }
    if (a >s b) { c |= 256; }
    if (a <s b) { c |= 512; }
    if (a >=s b) { c |= 1024; }
    if (a <=s b) { c |= -2048; }

    return c;
}

export fn main() -> reg u32 {
    reg u32 r;
    r = 0;

    reg u32 r0;
    reg u32 r1;

    reg u32 a;
    a = 10;

    reg u32 b;
    b = 3;

    r0 = if_reg_reg_lowering();
    r0 = sub_imm_lowering(a);
    r0 = add_lowering(a, b);
    r0, r1 = copy_lowering(a);
    r0 = pass(a);
    r0, r1 = copy(a);

    return r;
}
